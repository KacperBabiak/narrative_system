//### Types:
type character;
type ship;

//### Properties:
property satisfaction(char: character) : number; // Satisfaction level of each character
property altruism(char: character) : number; // Altruism level of each character (-3 to 3)
property ambition(char: character) : number; // Ambition level of each character (-3 to 3)
property likes(char: character, other: character) : number; // Relationship liking level between characters (-3 to 3)
property food(char: character) : number; // Food resource of each character
property safety(char: character) : number; // Safety level of each character
property fighting_ability(char: character) : number; // Fighting ability level of each character (-3 to 3)

property ghost_relations(s :ship) : number; // Relationship level with ghosts (-3 to 3)
property overall_food(s :ship) : number; // Overall food resource available
property overall_coins(s :ship) : number; // Overall coins available

property wants_to_survive(char: character) : boolean; 
property wants_to_help_everyone(char: character) : boolean; 
property wants_to_help_themself(char: character) : boolean; 


entity mc : character;
		   entity ship:ship;
		   entity char_acting: character;  
altruism(char_acting) = -1 ;
ambition(char_acting) = 0 ;
fighting_ability(char_acting) = -1 ;
safety(char_acting) = 2 ;
food(char_acting) = 0 ;
likes(char_acting, char1) = -1 ;
likes(char_acting, char2) = 1 ;
ghost_relations(ship) =1;  
overall_food(ship) =0 ; 
overall_coins(ship) =1;  
entity char1: character;  
altruism(char1) = 0 ;
ambition(char1) = 0 ;
fighting_ability(char1) = 1 ;
safety(char1) = -1 ;
food(char1) = 0 ;
likes(char1, char_acting) = 0 ;
likes(char1, char2) = 0 ;
ghost_relations(ship) =1;  
overall_food(ship) =0 ; 
overall_coins(ship) =1;  
entity char2: character;  
altruism(char2) = 1 ;
ambition(char2) = -1 ;
fighting_ability(char2) = 0 ;
safety(char2) = -1 ;
food(char2) = 0 ;
likes(char2, char_acting) = -1 ;
likes(char2, char1) = 0 ;
ghost_relations(ship) =1;  
overall_food(ship) =0 ; 
overall_coins(ship) =1;  
//# Action: survive
action survive(char: character) {
    precondition:
        food(char) >= 0 // Character has no food
        &safety(char) > 0
        &char != mc; // Character's safety level is adequate
    effect:
        if (ambition(char)<=0)
            satisfaction(char) = satisfaction(char) + 1; // Character gains satisfaction
    consenting: char;
};

//# Action: help_everyone
action help_everyone(char: character) {
    precondition:
        overall_food(ship) > 0 // Character has food
       // &safety(char) < 0
        &char != mc; // Character's safety level is low
    effect:
    if (ambition(char)>0 & altruism(char)>= 0)
         satisfaction(char) = satisfaction(char) + 1; // Character gains satisfaction
    consenting: char;
};

//# Action: help_themself
action help_themself(char: character) {
    precondition:
        food(char) > 0 // Character has food
        //&safety(char) < 0
        &char != mc; // Character's safety level is low
    effect:
    if (ambition(char)>0 & altruism(char) < 0)
         satisfaction(char) = satisfaction(char) + 1;// Character gains satisfaction
    consenting: char;
};

//# Action: ghost_deal
action ghost_deal(char: character) {
    precondition:
        ghost_relations(ship) > 0
        &char != mc; // Character has good relations with ghosts
    effect:
        overall_food(ship) = overall_food(ship) + 1 // Character gains overall food
        &safety(char) =  safety(char) - 1 // Character's safety level decreases
        &ghost_relations(ship) = ghost_relations(ship) - 1; // Character's relations with ghosts decrease
    consenting: char;
};

//# Action: fight_monster
action fight_monster(char: character) {
    precondition:
        fighting_ability(char) > 0
        &char != mc; // Character has high fighting ability
    effect:
        
        overall_food(ship) = overall_food(ship) + 1
        &fighting_ability(char) = fighting_ability(char) - 1 // Character's fighting ability decreases
        &safety(char) = safety(char) - 1; // Character's safety level decreases
    consenting: char;
};

//# Action: sacrifice_food
action sacrifice_food(char: character) {
    precondition:
        food(char) > 0
        &char != mc; // Character has food
    effect:
       
        food(char) = food(char) -  1 // Character sacrifices food
        &ghost_relations(ship) = ghost_relations(ship) + 1;// Character's relations with ghosts improve
    consenting: char;
};

//# Action: sacrifice_money
action sacrifice_money(char: character) {
    precondition:
        overall_coins(ship) > 0
        &char != mc; // There are overall coins available
    effect:
        overall_coins(ship) = overall_coins(ship)- 1 // Overall coins decrease
        &ghost_relations(ship) = ghost_relations(ship) + 1;  // Character's relations with ghosts improve
    consenting: char;
};

//# Action: pray
action pray(char: character, char2: character) {
    precondition:
        wants_to_survive(char2) 
        &char != char2
        &char != mc; // Character2's safety level is low
    effect:
       
        ghost_relations(ship) = ghost_relations(ship) + 1; 
    consenting: char;
};

//# Action: train_together
action train_together(char: character, char2: character) {
    precondition:
        (likes(char2, char) > 1 | 
        wants_to_help_everyone(char2))
        &char != char2
        &char != mc;
    effect:
        
        fighting_ability(char) = fighting_ability(char) + 1 // Character's fighting ability increases
        &fighting_ability(char2) =  fighting_ability(char) + 1 // Char2's fighting ability increases
        &safety(char) = safety(char) + 1 // Character's safety level increases
        &safety(char2) = safety(char2) + 1; // Char2's safety level increases
    consenting: char;
};



//# Action: take_food
action take_food(char: character, char2: character) {
    precondition:
        fighting_ability(char) > fighting_ability(char2) // Character has higher fighting ability than char2
        &food(char2) > 0
        &char != char2
         &char != mc; // Char2 has food
    effect:
        
        food(char) = food(char) + 1 // Character gains food
        &food(char2) = food(char2) - 1 // Char2 loses food
        &likes(char2, char) = likes(char2, char) -  1 // Relationship liking decreases between char and char2
        &safety(char) = safety(char) -  1 
        &safety(char2) = safety(char2) - 1; // Character's safety level decreases
    consenting: char;
};

//# Action: threaten
action threaten(char: character, char2: character) {
    precondition:
        wants_to_survive(char2) 
        &char != char2
        &char != mc; 
    effect:
        
        fighting_ability(char2) = fighting_ability(char2) - 1 // Character's fighting ability increases
        &likes(char2, char) = likes(char2, char) - 1; // Relationship liking decreases between char and char2
    consenting: char;
};

//# Action: weaken
action weaken(char: character, char2: character) {
    precondition:
    char != char2
    &char != mc;
    effect:
         fighting_ability(char2) = fighting_ability(char2) - 1 // Character's fighting ability increases
        &likes(char2, char) = likes(char2, char) - 1; // Relationship liking decreases between char and char2
    consenting: char;
};

//# Action: safe_alone
action safe_alone(char: character) {
    precondition:
    char != mc;
    effect:
        safety(char) = safety(char) + 1; // Character's safety level increases
    consenting: char;
};

//# Action: safe_together
action safe_together(char: character, char2: character) {
    precondition:
        wants_to_survive(char2)
        &char != char2
        &char != mc; // Char2 has no food
    effect:
        safety(char) =  safety(char) +1 // Character's safety level increases
        &safety(char2) =  safety(char2) +1; // Char2's safety level increases
    consenting: char;
};

//# Action: accuse
action accuse(char: character, char2: character) {
    precondition:
        wants_to_help_themself(char2)
        &char != char2
        &char != mc; // Character has no food
    effect:
        food(char) = 0
        &likes(char2, char) = likes(char2, char) - 1; // Relationship liking increases between char and char2
    consenting: char;
};
			utility(): 
 satisfaction(char_acting) ;
utility(char_acting): 
 satisfaction(char_acting); 
 utility(char1): 
 satisfaction(char1); 
 utility(char2): 
 satisfaction(char2); 
 