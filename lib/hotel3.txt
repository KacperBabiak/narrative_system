///////////////////////////////////entity


entity actor : character;
entity soldier : character;
entity doctor : character;
entity thief : character;
entity mc : character;
entity tumblr : character;

//////////////////////////////////property


//character
property health(character : character) : number;
property points(character : character) : number;
property did_something(char: character) : number;
property imprisoned(char: character) : boolean;
property in_duel(char: character) : boolean;
property challenged(char: character, char2: character) : boolean;
property challenged_deal(char: character, char2: character) : boolean;
property gave_answer(char: character) : boolean;


//emotions
property happiness(character : character) : number;
property altruism(character : character) : number;
property ambition(character : character) : number;

//emotions towards other characters
property likes(character1: character, character2 : character) : number;
property trusts(character1: character, character2 : character) : number;


//////////////////////////////////////init_properties

health(thief) = 100;
points(thief) = 3;
happiness(thief) = 50;
altruism(thief) = 50;
ambition(thief) = 50;
likes(thief, doctor) = 15;
likes(thief, mc) = 15;
likes(thief, soldier) = -15;
likes(thief, actor) = 45;
likes(thief, tumblr) = 5;
trusts(thief, mc) = 15;
trusts(thief, doctor) = 35;
trusts(thief, soldier) = -15;
trusts(thief, actor) = 35;
trusts(thief, tumblr) = 5;


health(doctor) = 100;
points(doctor) = 3;
happiness(doctor) = 50;
altruism(doctor) = 50;
ambition(doctor) = 80;
likes(doctor, mc) = 35;
likes(doctor, thief) = 20;
likes(doctor, soldier) = 15;
likes(doctor, actor) = 30;
likes(doctor, tumblr) = 5;
trusts(doctor, mc) = 35;
trusts(doctor, thief) = 25;
trusts(doctor, soldier) = 20;
trusts(doctor, actor) = 15;
trusts(doctor, tumblr) = 5;



health(soldier) = 100;
points(soldier) = 3;
happiness(soldier) = 50;
altruism(soldier) = 50;
ambition(soldier) = 80;
likes(soldier, mc) = 0;
likes(soldier, thief) = 10;
likes(soldier, doctor) = 35;
likes(soldier, actor) = -5;
likes(soldier, tumblr) = 5;
trusts(soldier, mc) = 5;
trusts(soldier, thief) = 5;
trusts(soldier, doctor) = 20;
trusts(soldier, actor) = -15;
trusts(soldier, tumblr) = 5;



health(actor) = 100;
points(actor) = 3;
happiness(actor) = 50;
altruism(actor) = 50;
ambition(actor) = 60;
likes(actor, mc) = 10;
likes(actor, thief) = 20;
likes(actor, doctor) = 35;
likes(actor, soldier) = 5;
likes(actor, tumblr) = 5;
trusts(actor, mc) = 15;
trusts(actor, thief) = 15;
trusts(actor, doctor) = 45;
trusts(actor, soldier) = 25;
trusts(actor, tumblr) = 5;



health(tumblr) = 100;
points(tumblr) = 3;
happiness(tumblr) = 50;
altruism(tumblr) = 50;
ambition(tumblr) = 10;
likes(tumblr, mc) = 50;
likes(tumblr, thief) = 5;
likes(tumblr, doctor) = 5;
likes(tumblr, soldier) = 5;
likes(tumblr, actor) = 5;
trusts(tumblr, mc) = 5;
trusts(tumblr, thief) = 5;
trusts(tumblr, doctor) = 5;
trusts(tumblr, soldier) = 5;
trusts(tumblr, actor) = 5;


//actions

//podejscie - teraz, dla uproszczenia, jedna akcja na raz (chyba ze jedyne co trzeba cofać to growe punkty itp) na postać?
//to co zmotywuje postacie jest effectach, to co chca zyskac lub czego sie boja
//ograniczenia w precondition tylko gdy naprawde ktoś nie moze tego zrobić

//jeśli postać ma dużo ambicji to mysli ze zwieksza punkty i szczescie, jesli nie to odwrotnie
//altruizm - brak
//altruizm char - ?
//ambicja - zwieksza się
//ambicja char - ?
//szczescie - bardzo sie zwieksza, jesli wysoka ambicja; zmniejsza jesli niska ambicja
//lubienie char - zwieksza się jesli wysoka ambicja; zmniejsza jesli niska ambicja 
//ufanie char - brak
//lubienie other - zwieksza się jesli wysoka ambicja; zmniejsza jesli niska ambicja 
//ufanie other - brak



action challenge_normal(char : character, other : character) {
	precondition:
        char != other 
		//& !in_duel(char) 
        //&!in_duel(other) 
        //& ambition(char) > 40
		;

	effect:
        //in_duel(char) &
		did_something(char) = did_something(char) + 1 &
        challenged(char, other) &
        & if(ambition(char) > 65) (happiness(char) = happiness(char) + 5
                                  & ambition(char) = ambition(char) + 5
                                  & points(char) =  points(char) + 2)
        & if(ambition(char) < 45)   (happiness(char) = happiness(char) - 5
                                  & points(char) =  points(char) - 1)
		;
		 
	consenting: char;
	
};


//ogólnie //postać która chce taktycznie zdobywac punkty, nie chce rywalizacji, lub chce zdobyć kogoś zaufanie i lubienie
//altruizm
//ambicja
//szczescie
//lubienie char - 
//ufanie char -
//nienawiść char - 
//lubienie other -
//ufanie other -
//nienawiść other - 
action challenge_deal_fair(char : character, other : character) {
	precondition:
        char != other 
		//& !in_duel(char) 
        //&!in_duel(other) 
        //& trusts(char,other) > 40
		;

	effect:
        //in_duel(char) &
		did_something(char) = did_something(char) + 1 &
        challenged_deal(char, other) &
        points(char) =  points(char) + 1
        & likes(other,char) = likes(other,char) + 5
        & trusts(other,char) = trusts(other,char) + 5
		;
		 
	consenting: char;
	
};




//postać chce zdobyć jak najwięcej punktów, nie obchodzi opinie innych
//zmniejsza się altruizm
//jesli jest ambitny, ambicja i szczescie sie zwieksza
//jesli ma wysoki altruizm, to zmniejsza się to i szczeście
//jesli lubi ta osobe to szczescie sie zmniejsza, jesli nie lubi to zwieksza

action challenge_deal_unfair(char : character, other : character) {
	precondition:
        char != other 
		//& !in_duel(char) 
        //&!in_duel(other) 
        //& likes(char,other) < 40
        //& ambition(char) > 60
		;

	effect:
		did_something(char) = did_something(char) + 1 &
        //in_duel(char) &
        challenged_deal(char, other)
        if(ambition(char)>65) (ambition(char) = ambition(char) + 5)
        if(altruism(char)>65) (altruism(char) = altruism(char) - 5 & happiness(char) = happiness(char) - 5) 
        & points(char) =  points(char) + 2
        & likes(other,char) = likes(other,char) - 10
        & trusts(other,char) = trusts(other,char) -10
		;
		 
	consenting: char;
	
};

//altruizm
//ambicja
//szczescie
//lubienie char - 
//ufanie char -
//nienawiść char - 
//lubienie other -
//ufanie other -
//nienawiść other - 
action challenge_threat(char : character, other : character) {
	precondition:
        char != other 
		//& !in_duel(char) 
        //&!in_duel(other) 
        & ambition(char) > 40
        & altruism(char) < 30
		;

	effect:
		did_something(char) = did_something(char) + 1 &
        //in_duel(char) &
        challenged(char, other) &
        points(char) =  points(char) + 2
        & ambition(char) = ambition(char) + 5
        & if(ambition(char) > 40) happiness(char) = happiness(char) + 5
		;
		 
	consenting: char;
	
};


//jesli ma wysoka ambicje to efektem jest dostanie punktów, jesli nie to stracenie
//altruizm
//ambicja
//szczescie
//lubienie char - 
//ufanie char -
//nienawiść char - 
//lubienie other -
//ufanie other -
//nienawiść other - 
action accept(char : character, other : character) {
	precondition:
        char != other 
		& challenged(other, char) 
        & ambition(char) > 40
        
		;

	effect:
		did_something(char) = did_something(char) + 1 
        & gave_answer(char) 
        & points(char) =  points(char) + 2
        & ambition(char) = ambition(char) + 5
        & if(ambition(char) > 40) happiness(other) = happiness(char) + 5
		;
		 
	consenting: char;
	
};

//altruizm
//ambicja
//szczescie
//lubienie char - 
//ufanie char -
//nienawiść char - 
//lubienie other -
//ufanie other -
//nienawiść other - 
action accept_deal_fair(char : character, other : character) {
	precondition:
        char != other 
		& challenged_deal(other, char) 
        & trusts(char,other) > 40
        
		;

	effect:
		did_something(char) = did_something(char) + 1 
        & gave_answer(char) 
        & points(char) =  points(char) + 1
    
		;
		 
	consenting: char;
	
};

//altruizm
//ambicja
//szczescie
//lubienie char - 
//ufanie char -
//nienawiść char - 
//lubienie other -
//ufanie other -
//nienawiść other - 
action accept_deal_unfair(char : character, other : character) {
	precondition:
        char != other 
		& challenged_deal(other, char) 
        & ambition(char) > 40
        
		;

	effect:
		did_something(char) = did_something(char) + 1 
        & gave_answer(char) 
        & points(char) =  points(char) + 2
    
		;
		 
	consenting: char;
	
};

//dlaczego miałby odmówić
//altruizm
//ambicja
//szczescie
//lubienie char - 
//ufanie char -
//nienawiść char - 
//lubienie other -
//ufanie other -
//nienawiść other - 
action refuse(char : character, other : character) {
	precondition:
        char != other 
		& (challenged(other, char) | challenged_deal(other, char))
        
		;

	effect:
		did_something(char) = did_something(char) + 1 
        & gave_answer(char) 
		;
		 
	consenting: char;
	
};





utility(): ((sum(c : character) did_something(c)) > 2 ) &
        
            exists(a : character) 
                gave_answer(a)
        
            ;

//(if(0 < (sum(c : character) did_something(c)) < 3) 1 else 0) ;



utility(doctor):
	 did_something(doctor);

utility(thief):
	 did_something(thief) ;

utility(actor):
	 did_something(actor); 

utility(soldier):
	 did_something(soldier); 
