//### Types:
type item;
type world;
type state;

//### Properties:
property health(char: character) : number; 
property knowledge(char: character) : number; 
property authority(char: character) : number; 


property satisfaction(char: character) : number; // Satisfaction level of each character
property altruism(char: character) : number; // Altruism level of each character (-3 to 3)
property ambition(char: character) : number; // Ambition level of each character (-3 to 3)
property max_ambition(char: character) : number; // Ambition level of each character (-3 to 3)
property relation(char: character, other: character) : number; // Relationship liking level between characters (-3 to 3)
property support(char: character) : number; 
property supports(char: character, other: character) : boolean;
property money(char: character) : number; 
property state(char: character) : state; 

property ship_defense(world:world) : number; 
property ship_magic(world:world) : number; 
property ship_status(world:world) : number;

property later(world:world) : boolean; 
entity world:world;

entity hidden :state;
entity blocked :state;
		   entity mc: character;  
health(mc) = 2 ;
altruism(mc) = -2 ;
ambition(mc) = 2 ;
knowledge(mc) = 1 ;
support(mc) = 1 ;
money(mc) = 0 ;
state(mc) = ? ;
relation(mc, actor) = 2 ;
relation(mc, actress) = 2 ;
relation(mc, soldier) = -2 ;
ship_defense(world) =0;  
ship_status(world) =0 ; 
ship_magic(world) =0;  
entity actor: character;  
health(actor) = 2 ;
altruism(actor) = 0 ;
ambition(actor) = 3 ;
knowledge(actor) = 1 ;
support(actor) = 0 ;
money(actor) = 1 ;
state(actor) = hidden ;
relation(actor, mc) = 0 ;
relation(actor, actress) = 0 ;
relation(actor, soldier) = 1 ;
ship_defense(world) =0;  
ship_status(world) =0 ; 
ship_magic(world) =0;  
entity actress: character;  
health(actress) = 1 ;
altruism(actress) = 1 ;
ambition(actress) = 0 ;
knowledge(actress) = 0 ;
support(actress) = 0 ;
money(actress) = 1 ;
state(actress) = ? ;
relation(actress, mc) = -1 ;
relation(actress, actor) = 2 ;
relation(actress, soldier) = 1 ;
ship_defense(world) =0;  
ship_status(world) =0 ; 
ship_magic(world) =0;  
entity soldier: character;  
health(soldier) = 1 ;
altruism(soldier) = 2 ;
ambition(soldier) = 3 ;
knowledge(soldier) = 1 ;
support(soldier) = 1 ;
money(soldier) = 1 ;
state(soldier) = hidden ;
relation(soldier, mc) = 1 ;
relation(soldier, actor) = 0 ;
relation(soldier, actress) = 2 ;
ship_defense(world) =0;  
ship_status(world) =0 ; 
ship_magic(world) =0;  
//key akcje
	action key_action1(char:character) {
		precondition:
	
			health(char) > 0 
			&state(char)!= blocked
			&ship_defense(world) > 0
			&ship_status(world) < 0
			;
		effect:
			if(altruism(char) > 2 & ambition(char) > 2 )
				satisfaction(char) = satisfaction(char) + 1
			;
		consenting: char;
	};


	action key_action2(char:character) {
		precondition:
	
			health(char) > 0 
			&state(char)!= blocked
			&ship_status(world) < 0
			&authority(char) > 1
			//&relation(char2,char1) < 0
			;
		effect:
			if(altruism(char) <= 2 & ambition(char) > 2 )
				satisfaction(char) = satisfaction(char) + 1
			
			;
		consenting: char;
	};

	action key_action3(char:character) {
		precondition:
	
			health(char) > 0 
			&state(char)!= blocked
			&ship_magic(world) > 0
			&ship_status(world) > 0
			;
		effect:
			if(ambition(char) <= 2 )
			 satisfaction(char) = satisfaction(char) + 1
			;
		consenting: char;
	};


//akcje

	action change_health_down(char:character,char2:character) {
		precondition:
	
			health(char) > 0 
			&state(char)!= blocked
			&char == actor
			;
		effect:
			health(char2) = health(char2) - 1
			& later(world) 
			;
		consenting: char;
	};

	action change_health_up(char:character,char2:character) {
		precondition:
	
			health(char) > 0 
			&state(char)!= blocked
			&char == actor
			;
		effect:
			health(char2) = health(char2) + 1 
			& later(world)
			;
		consenting: char;
	};


	 action change_knowledge_down(char:character,char2:character) {
		precondition:
	
			health(char) > 0 
			&state(char)!= blocked
			&knowledge(char) > 1
			&char == actor
			;
		effect:
			knowledge(char2) = knowledge(char2) - 1
			& later(world) 
			;
		consenting: char;
	};

	action change_knowledge_up(char:character) {
		precondition:
	
			health(char) > 0 
			&state(char)!= blocked
			&char == actor
			&state(char) == hidden
			;
		effect:
			knowledge(char) = knowledge(char) + 1
			& later(world)
			;
		consenting: char;
	};

	action change_relation_down(char:character,char2:character,char3:character) {
		precondition:
	
			health(char) > 0
			&state(char)!= blocked 
			&char == actor
			;
		effect:
			relation(char2,char3) = relation(char2,char3) - 1 
			& health(char) = health(char) - 1 
			& later(world)
			;
		consenting: char;
	};

	action change_relation_up(char:character,char2:character,char3:character) {
		precondition:
	
			health(char) > 0 
			&state(char)!= blocked
			&char == actor
			;
		effect:
			relation(char2,char3) = relation(char2,char3) + 1 
			& later(world)
			;
		consenting: char;
	};


	action hide(char:character) {
		precondition:
	
			health(char) > 0 
			& state(char) != hidden
			&state(char)!= blocked
			;
		effect:
			state(char) = hidden
			& later(world)
			;
		consenting: char;
	};

	action find(char:character,char2:character) {
		precondition:
	
			health(char) > 0 
			& state(char2) == hidden
			&state(char)!= blocked
			&char == actor
			;
		effect:
			state(char2) = ?
			& later(world)
			;
		consenting: char;
	};

	action block(char:character,char2:character) {
		precondition:
	
			 state(char2) != blocked
			 &char == actor
			;
		effect:
			state(char2) = blocked
			& later(world)
			;
		consenting: char;
	};

	action unblock(char:character,char2:character) {
		precondition:
	
			health(char) > 0 
			&state(char)!= blocked
			& state(char2) == blocked
			&char == actor
			;
		effect:
			state(char2) = ?
			& later(world)
			;
		consenting: char;
	};
		   
		   action unblock_yourself(char:character) {
		precondition:
	
			health(char) > 0 
			&state(char)== blocked
			
			&char == actor
			;
		effect:
			state(char) = ?
			& later(world)
			;
		consenting: char;
	};

	action change_ship_defense_down(char:character) {
		precondition:
	
			health(char) > 0 
			&state(char)!= blocked
			&char == actor
			;
		effect:
			ship_defense(world) = ship_defense(world) - 1
			& later(world)
			;
		consenting: char;
	};

	action change_ship_defense_up(char:character) {
		precondition:
	
			health(char) > 0 
			&state(char)!= blocked
			&char == actor
			;
		effect:
			ship_defense(world) = ship_defense(world) + 1
			& later(world)
			
			;
		consenting: char;
	};


	action change_ship_magic_down(char:character) {
		precondition:
	
			health(char) > 0 
			&state(char)!= blocked
			&char == actor
			;
		effect:
			ship_magic(world) = ship_magic(world) - 1
			& later(world)
			;
		consenting: char;
	};

	action change_ship_magic_up(char:character) {
		precondition:
	
			health(char) > 0 
			&state(char)!= blocked
			&char == actor
			;
		effect:
			ship_magic(world) = ship_magic(world) + 1
			& later(world)
			;
		consenting: char;
	};


	action change_ship_status_down(char:character) {
		precondition:
	
			health(char) > 0 
			&state(char)!= blocked
		   &char == actor
			;
		effect:
			ship_status(world) = ship_status(world) - 1
			& later(world)
			;
		consenting: char;
	};

	action change_ship_status_up(char:character) {
		precondition:
	
			health(char) > 0 
			&state(char)!= blocked
			&char == actor
			;
		effect:
			ship_status(world) = ship_status(world) + 1
			;
		consenting: char;
	};


	action support(char:character,char2:character, char3:character) {
		precondition:
	
			 state(char) != blocked
			 &char == actor
			 &char != char2
			 &!supports(char,char2)
			;
		effect:
			supports(char,char2)
			& support(char2) = support(char2) + 1
			& later(world)
			;
		consenting: char;
	};

action lose_support(char:character,char2:character) {
		precondition:
	
			 state(char) != blocked
			 &char == actor
			 &char != char2
			 &supports(char,char2)
			;
		effect:
			!supports(char,char2)
			& support(char2) = support(char2) - 1
			& later(world)
			;
		consenting: char;
	};

action support_money(char:character,char2:character, char3:character) {
		precondition:
	
			 state(char) != blocked
			 &char != char3
			 &char != char2
			 &char == actor
			 &!supports(char2,char3)
			 &money(char) > 0
			;
		effect:
			supports(char2,char3)
			& support(char3) = support(char3) + 1
			& later(world)
			&money(char) = money(char) - 1
			&money(char2) = money(char2) + 1
			;
		consenting: char;
	};

action lose_support_money(char:character,char2:character, char3:character) {
		precondition:
	
			 state(char2) != blocked
			 &char == actor
			 &char != char3
			 &char != char2
			 &supports(char2,char3)
			  &money(char) > 0
			;
		effect:
			!supports(char2,char3)
			& support(char3) = support(char3) - 1
			& later(world)
			&money(char) = money(char) - 1
			&money(char2) = money(char2) + 1
			;
		consenting: char;
	};

action support_authority(char:character,char2:character, char3:character) {
		precondition:
	
			 state(char2) != blocked
			 &char != char3
			 &char != char2
			 &char == actor
			 &!supports(char2,char3)
			 &authority(char) > 2
			;
		effect:
			supports(char2,char3)
			& support(char3) = support(char3) + 1
			& later(world)
		   
			;
		consenting: char;
	};

action lose_support_authority(char:character,char2:character, char3:character) {
		precondition:
	
			 state(char2) != blocked
			 &char == actor
			 &char != char3
			 &char != char2
			 &supports(char2,char3)
			 &authority(char) > 2
			;
		effect:
			!supports(char2,char3)
			& support(char3) = support(char3) - 1
			& later(world)
			
			;
		consenting: char;
	};


trigger authority_calc(char:character) {
	precondition:
		authority(char) != (if (health(char)>2)  1 else 0 )+  knowledge(char) + support(char)  ;
	effect:
		authority(char) == (if (health(char)>2)  1 else 0 ) +  knowledge(char)   + support(char)   ;
};


			utility(): 
 satisfaction(actor) ;
utility(mc): 
 satisfaction(mc); 
 utility(actor): 
 satisfaction(actor); 
 utility(actress): 
 satisfaction(actress); 
 utility(soldier): 
 satisfaction(soldier); 
 