/////////////////////////////////////types


type person;
type item ;
type place;

//////////////////////////////////property


//person

entity world : character;


property health(char: person) : number;
property satisfaction(char: person) : number;
property at(person : person) : place;
property has(person : person, item:item) : number;
property knows_location(person : person, item:item) : boolean;
property altruism(char: person) : number;
property ambition(char: person) : number;
property likes(char: person, char2: person) : number;
property wants_to_attack(person : person, char2: person) : boolean;
property quantity(item : item) : number;


entity Gold: item;  
entity Fuel: item;  
entity Food: item;  
entity Meds: item;  
entity Map: item;  

entity island1 : place;
entity island2 : place;
entity island3 : place;

entity Actress: person;  
health(Actress) = 1.0 ; 
altruism(Actress) = 21.0 ;
ambition(Actress) = 3.0 ;
satisfaction(Actress) = 1.0 ;
has(Actress,Gold) = 0.0 ; 
has(Actress,Fuel) = 0.0 ; 
has(Actress,Meds) = 1.0 ; 
//knows_location(Actress,Meds) ; 
has(Actress,Food) = 0.0 ; 
likes(Actress,Actor) = -5.0 ; 
wants_to_attack(Actress,Actor) ; 
likes(Actress,Agent) = 0.0 ; 
likes(Actress,Mc) = 0.0 ; 
entity Actor: person;  
health(Actor) = 3.0 ; 
altruism(Actor) = -1.0 ;
ambition(Actor) = 5.0 ;
satisfaction(Actor) = 5.25 ;
has(Actor,Gold) = 2.0 ; 
has(Actor,Fuel) = 3.0 ; 
has(Actor,Meds) = 0.0 ; 
has(Actor,Food) = 0.0 ; 
likes(Actor,Actress) = 0.0 ; 
likes(Actor,Agent) = 0.0 ; 
likes(Actor,Mc) = 0.0 ; 
entity Agent: person;  
health(Agent) = 2.5 ; 
altruism(Agent) = -21.0 ;
ambition(Agent) = 4.0 ;
satisfaction(Agent) = 10.25 ;
has(Agent,Gold) = 0.0 ; 
has(Agent,Fuel) = 0.0 ; 
has(Agent,Meds) = 0.0 ; 
has(Agent,Food) = 3.0 ; 
likes(Agent,Actress) = 0.0 ; 
likes(Agent,Actor) = 0.0 ; 
likes(Agent,Mc) = 0.0 ; 
entity Mc: person;  
health(Mc) = 2.0 ; 
altruism(Mc) = 0.0 ;
ambition(Mc) = 9.0 ;
satisfaction(Mc) = 0.0 ;
has(Mc,Gold) = 1.0 ; 
has(Mc,Fuel) = 1.0 ; 
has(Mc,Meds) = 0.0 ; 
has(Mc,Food) = 0.0 ; 
likes(Mc,Actress) = 0.0 ; 
likes(Mc,Actor) = 0.0 ; 
likes(Mc,Agent) = -5.0 ; 
wants_to_attack(Mc,Agent) ; 

											////////////////////////////////////////actions

action lose_in_storm(char:person, item:item){
							precondition:
							health(char) != 0
							
							;

							effect:
							has(char,item) = has(char,item) - 1
							
							
							;
							consenting: world;
												
};

action get_attacked(char:person, item:item){
	precondition:
							health(char) != 0
							
							;

							effect:
							health(char) = health(char) - 1
							
							
							;
							consenting: world;
							
						};

action get_info_about(char:person, item:item) {
							precondition:
							!knows_location(char,item)
							
							;

							effect:
							knows_location(char,item)
							
							
							;
							consenting: world;
							
						};

action hear_about_good(char:person, char2:person) {
							precondition:
							health(char) != 0
							
							;

							effect:
							likes(char,char2) = likes(char,char2) + 1
							
							
							;
							consenting: world;
							
						};

action hear_about_bad(char:person, char2:person) {
							precondition:
							health(char) != 0
							
							;

							effect:
							likes(char,char2) = likes(char,char2) - 1
							
							
							;
							consenting: world;
							
						};

action decide_to_attack(char:person, char2:person, island:place) {
							precondition:
							!wants_to_attack(char,char2)
							&at(char) == island
							&at(char2) == island
							;

							effect:
							wants_to_attack(char,char2)
							
							
							;
							consenting: world;
							
						};

action decide_to_help(char:person, char2:person, char3:person, island:place) {
							precondition:
							!wants_to_attack(char,char3)
							&wants_to_attack(char2,char3)
							&at(char) == island
							&at(char2) == island
							&at(char3) == island
							;

							effect:
							wants_to_attack(char,char3)
							
							
							;
							consenting: world;
							
						};

action travel(char:person, island:place){
	precondition:
							!at(char) == island
							
							;

							effect:
							at(char) = island
							
							
							;
							consenting: world;
							
						};
	

utility(): 
knows_location(Actor,Meds) & likes(Actress,Agent)>0 & wants_to_attack(Agent,Mc);


utility(world): 
knows_location(Actor,Meds) & likes(Actress,Agent)>0 & wants_to_attack(Agent,Mc);