type stan;


//### Properties:
property satisfaction(char: character) : number; // Satisfaction level of each character
property altruism(char: character) : number; // Altruism level of each character (-3 to 3)
property ambition(char: character) : number; // Ambition level of each character (-3 to 3)
property desperation(char: character) : number; // Ambition level of each character (-3 to 3)
property max_desp(char: character) : number; // Ambition level of each character (-3 to 3)
property risk(char: character) : number; // Ambition level of each character (-3 to 3)
property likes(char: character, other: character) : number; // Relationship liking level between characters (-3 to 3)

property wantsChange(char: character, stan: stan ) : number;
property currentValue(stan:stan) : number;
property futureValue(stan:stan) : number;

entity mc : character;
entity actress : character;
entity stan1 : stan;

altruism(mc) = 1;
ambition(mc) = 4;
desperation(mc) = 2;
currentValue(stan1) = -1;
wantsChange(mc,stan1) = 0;
wantsChange(actress,stan1) = -1;

//# Action: survive
action key_action1(char: character) {
    precondition:
        (ambition(char) + desperation(char) >= 4)
        & risk(char)< max_desp(char)
          ;
    effect:
        if (futureValue(stan1) == 0 )
            satisfaction(char) = 1
        else satisfaction(char) = 0;
    consenting: char;
};

action block_char(char: character,char2: character, stan:stan) {
    precondition:
        wantsChange(char2, stan) != 0 
          ;
    effect:
        risk(char) = risk(char) + 1 &
        wantsChange(char2, stan) = 0 ;
    consenting: char;
};

action change_stan(char: character,stan:stan){
    precondition:
        exists(c: character) (wantsChange(c, stan) != 0);
    effect:
    risk(char) = risk(char) + 4 &
    currentValue(stan) = currentValue(stan) + 1;
    consenting:char;
};

action key_action2(char: character) {
    precondition:
        altruism(char) < -2;
    effect:
        satisfaction(char) = 1;
    consenting: char;
};


action key_action3(char: character) {
    precondition:
        ambition(char)  > 2
        &altruism(char) <0 ;
    effect:
        satisfaction(char) = 1;
    consenting: char;
};

/*
action key_action4(char: character) {
    precondition:
        (ambition(char)  ) > 2
        &altruism(char) >=0 ;
    effect:
        satisfaction(char) = 1;
    consenting: char;
};
*/

action key_action5(char: character) {
    precondition:
        (ambition(char)  ) <= 2
        &altruism(char) <0 ;
    effect:
        satisfaction(char) = 1;
    consenting: char;
};


action key_action6(char: character) {
    precondition:
        (ambition(char) ) <= 2
        &altruism(char) >=0 ;
    effect:
        satisfaction(char) = 1;
    consenting: char;
};


trigger value_calc(stan:stan) {
	precondition:
		futureValue(stan) != currentValue(stan) + sum(c:character) (wantsChange(c,stan))  ;
	effect:
		futureValue(stan) = currentValue(stan) + sum(c:character) (wantsChange(c,stan))  ; // ? is unknown, equivalent to null.
};

trigger max_desp_calc(char:character) {
	precondition:
		max_desp(char) !=  ambition(char) + desperation(char) ;
	effect:
		max_desp(char) =  ambition(char) + desperation(char) ;
};


//### Utility Function:
utility():
    satisfaction(mc);

utility(mc):
    satisfaction(mc);