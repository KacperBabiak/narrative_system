type location;
type world;
type state;
type emotion;

//### Properties:
property health(char: character) : number; 

property power(char: character) : number; 
property satisfaction(char: character) : number; // Satisfaction level of each character
property altruism(char: character) : number; // Altruism level of each character (-3 to 3)
property ambition(char: character) : number; // Ambition level of each character (-3 to 3)
property desperation(char: character) : number; // Ambition level of each character (-3 to 3)
property location(char: character) : location;
property relation(char: character, other: character) : number; // Relationship liking level between characters (-3 to 3)
property support(char: character) : number;
property supports(char: character, other: character) : boolean;
property money(char: character) : number; 
property state(char: character) : state; 
property emotion(char: character) : emotion; 

property locked(loc:location) : boolean;
property treasure_location(world:world) : location;
property knows_location_treasure(char: character) : boolean; 
property later(world:world) : boolean; 
entity world:world;

entity hidden :state;
entity stuned :state;

entity anger : emotion;
entity happiness : emotion;
entity fear : emotion;

entity mc : character;
entity actress : character;
entity actor : character;
entity soldier : character;

entity location1 : location;
entity location2 : location;
entity location3 : location;
entity location4 : location;
entity location5 : location;
treasure_location(world) = location5;

health(mc) = 2;
health(actress) = 2;
health(actor) = 2;
relation(actor,mc) = -3;
location(actor) = location3;
money(actor) = 5;
ambition(mc) = 2;
altruism(mc) = 2;
money(actor) = 2;
ambition(actress) = -3;
altruism(actress) = 2;

ambition(actor) = 5;
altruism(actor) = -2;

//state(actor) = stuned;

//key akcje
    

//akcje
    //lokacje
    action explore(char:character, location:location) {
        precondition:
    
            health(char) > 0 
            &state(char)!= stuned
            &char == mc
            &location(char) == location
            &treasure_location(world) == location
            ;
        effect:
            knows_location_treasure(char)
            & later(world) 
            ;
        consenting: char;
    };

     action tell_location(char:character,char2:character,char3:character, location:location) {
        precondition:
    
            health(char) > 0 
            &state(char)!= stuned
            &char == mc
            &knows_location_treasure(char)
            &!knows_location_treasure(char2)
            &location(char) == location
            &location(char2) == location
            ;
        effect:
            knows_location_treasure(char2)
            &relation(char2,char) =  relation(char2,char) + 1
            &if(state(char3) == hidden & location(char3) == location) knows_location_treasure(char3)
            & later(world) 
            ;
        consenting: char;
    };


   

/*
    action close(char:character, location:location) {
        precondition:
    
            health(char) > 0 
            &state(char)!= stuned
            &char == mc
            &location(char) == location
            &!locked(location) 
            ;
        effect:
            locked(location) 
            & later(world) 
            ;
        consenting: char;
    };


    action open(char:character, location:location) {
        precondition:
    
            health(char) > 0 
            &state(char)!= stuned
            &char == mc
            &location(char) == location
            &locked(location) 
            ;
        effect:
            !locked(location) 
            & later(world) 
            ;
        consenting: char;
    };
*/

    action travel(char:character, location:location) {
        precondition:
    
            health(char) > 0 
            &state(char)!= stuned
            &char == mc
            
            &!locked(location) 
            ;
        effect:
            location(char) = location
            &state(char) = ?
            & later(world) 
            ;
        consenting: char;
    };


    action invite(char:character,char2:character, location:location) {
        precondition:
    
            health(char) > 0 
            &state(char)!= stuned
            &state(char2)!= stuned
            &state(char2)!= hidden
            &char == mc
            &char != char2
            &relation(char2,char) >1
            &!locked(location) 
            ;
        effect:
            location(char2) = location
            &state(char) = ?
            & later(world) 
            ;
        consenting: char;
    };

    //stany

    action hide(char:character, location:location) {
        precondition:
    
            health(char) > 0 
            &state(char) != stuned
            &char == mc
            &location(char) == location
             
            ;
        effect:
            state(char) = hidden
            & later(world) 
            ;
        consenting: char;
    };


    action find(char:character, char2:character, location:location) {
        precondition:
    
            health(char) > 0 
            &state(char)!= stuned
            &state(char2) == hidden
            &char == mc
            &char != char2
            &location(char) == location
             &location(char2) == location
            ;
        effect:
            state(char2) = ?
            & later(world) 
            ;
        consenting: char;
    };


    action stun(char:character, char2:character, location:location) {
        precondition:
    
            health(char) > 0 
            &state(char) == hidden
            &state(char2) != hidden
            &char == mc
            &char != char2
            &location(char) == location
             &location(char2) == location
            ;
        effect:
            state(char2) = stuned
            &emotion(char2) = ?
            & if (power(char2) ==2) power(char2) = 1
            &if(altruism(char2) > 1 & relation(char,char2) > -1 ) satisfaction(char) = -1
            & later(world) 
            ;
        consenting: char;
    };
    

    action heal(char:character, char2:character, location:location) {
        precondition:
    
            health(char) > 0 
            &health(char2) == 1 
            &state(char) != stuned
            &state(char2) != hidden
            &char == mc
            &char != char2
            &location(char) == location
             &location(char2) == location
            ;
        effect:
            state(char2) = ?
            &health(char2) = health(char2) + 1
            &if(altruism(char2) > -2 & relation(char,char2) > 1 ) satisfaction(char) = 1
            & later(world) 
            ;
        consenting: char;
    };


    action spend_time(char:character, char2:character, location:location) {
        precondition:
    
            health(char) > 0 
             
            &state(char)!= stuned
            &state(char2) == ?
            &char == mc
            &location(char) == location
             &location(char2) == location
            ;
        effect:
            if(relation(char2,char) == 0) relation(char2,char) = 1
            &if(relation(char2,char) > 1) emotion(char2) = happiness
            &if(relation(char,char2) > 1) emotion(char) = happiness
            & later(world) 
            ;
        consenting: char;
    };
    
    action make_relation_better(char:character, char2:character,  char3:character, location:location) {
        precondition:
    
            health(char) > 0 
             
            &state(char)!= stuned
            &state(char2) == ?
            &char == mc
            &char != char2
            &char2 != char3
            &location(char) == location
             &location(char2) == location
            ;
        effect:
            if(relation(char2,char3) == 0) relation(char2,char3) = 1
            
            & later(world) 
            ;
        consenting: char;
    };


     action make_relation_worse(char:character, char2:character,  char3:character, location:location) {
        precondition:
    
            health(char) > 0 
             
            &state(char)!= stuned
            &state(char2) == ?
            &char == mc
            &char != char2
            &char2 != char3
            &location(char) == location
             &location(char2) == location
            ;
        effect:
            if(-1 < relation(char2,char3) < 2) relation(char2,char3) = relation(char2,char3) - 1
            
            & later(world) 
            ;
        consenting: char;
    };

    //pieniadze

    action find_treasure(char:character, location:location) {
        precondition:
    
            health(char) > 0 
             
            &state(char)!= stuned
            
            &char == mc
            &location(char) == location
            &treasure_location(world) == location
            &knows_location_treasure(char)
            ;
        effect:
            money(char) = money(char) + 2
            &treasure_location(world) = ?
            & emotion(char) = happiness
            & later(world) 
            ;
        consenting: char;
    };

/*
    action gift(char:character, char2:character, location:location) {
        precondition:
    
            health(char) > 0 
            &money(char) > 0
            &state(char)!= stuned
            &state(char2) == ?
            &char == mc
            &char!=char2
            &location(char) == location
             &location(char2) == location
            ;
        effect:
            relation(char2,char) = relation(char2,char) + 2
            &money(char) = money(char) - 1
            &money(char2) = money(char2) + 1
            &if(relation(char2,char) > 1) emotion(char2) = happiness
            &if(relation(char,char2) > 1) emotion(char) = happiness
            &if(altruism(char2) > 0 & relation(char,char2) > 2 ) satisfaction(char) = 1
            & later(world) 
            ;
        consenting: char;
    };
*/



    action take(char:character, char2:character, location:location) {
        precondition:
    
            health(char) > 0 
            &money(char2) > 0
            &state(char)!= stuned
            &char!=char2
            &(
                (power(char) >= power(char2)) 
                | 
                (state(char2) == stuned)
                |
                support(char) >= support(char2)
                )
            &char == mc
            &location(char) == location
             &location(char2) == location
            ;
        effect:
            relation(char2,char) = relation(char2,char) - 2
            &money(char) = money(char) + 1
            &money(char2) = money(char2) - 1
            &if(relation(char2,char) > 1) emotion(char2) = anger
            &if(ambition(char2) < 2) emotion(char2) = fear
            &if(altruism(char) > 1 & relation(char,char2) > -1 ) satisfaction(char) = -1
            & later(world) 
            ;
        consenting: char;
    };


    action harm(char:character,char2:character, location:location) {
        precondition:
    
            health(char) > 0 
            &state(char)!= stuned
           
            &state(char2) == ?
            &char != char2
            &char == mc
            &location(char) == location
             &location(char2) == location
            ;
        effect:
            health(char2) = health(char2) - 1
            &relation(char2,char) = relation(char2,char) - 2
            &if(relation(char2,char) > 1) emotion(char2) = anger
            &if(ambition(char2) < 2) emotion(char2) = fear
            &if(altruism(char2) < 2 & relation(char,char2) < -1 & ambition(char)>1) satisfaction(char) = 1
            
            & later(world) 
            ;
        consenting: char;
    };

    action train(char:character) {
        precondition:
    
            health(char) > 0 
            &state(char) != stuned
            &char == mc
            &power(char) == 1
             
            ;
        effect:
            power(char) = 2
            & later(world) 
            ;
        consenting: char;
    };

   


    action support(char:character,char2:character, char3:character) {
        precondition:
    
             state(char) != stuned
             &char == mc
             &char != char2
             &!supports(char,char2)
            ;
        effect:
            supports(char,char2)
            & support(char2) = support(char2) + 1
            &if( relation(char3,char2) < -2 ) satisfaction(char) = -1
            & later(world)
            ;
        consenting: char;
    };

/*
action lose_support(char:character,char2:character,char3 : character) {
        precondition:
    
             state(char) != stuned
             &char == mc
             &char != char2
             &supports(char,char2)
            ;
        effect:
            !supports(char,char2)
            & support(char2) = support(char2) - 1
            &if( relation(char3,char2) < -2 ) satisfaction(char) = 1
            & later(world)
            ;
        consenting: char;
    };
*/



trigger lose_sat_relation(char:character,char2:character) {
        precondition:
    
             satisfaction(char) > -1
             & relation(char2,char) < -1
             & relation(char,char2) > 1
             & !later(world)
            ;
        effect:
            satisfaction(char) = -1
            ;
        
    };

utility():
    if (health(mc) < 1 ) 
      0
    elseif(satisfaction(mc) < 0)
        0
    elseif( money(mc) > ambition(mc)| satisfaction(mc) > 0) 1 else 0
    ;

utility(mc):
    if (health(mc) < 1 ) 
      0
    elseif(satisfaction(mc) < 0)
        0
    elseif( money(mc) > ambition(mc) | satisfaction(mc) > 0) 1 else 0
    ;

utility(actress):
    satisfaction(actress);

utility(actor):
    satisfaction(actor);




