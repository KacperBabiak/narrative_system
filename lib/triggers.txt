type item;
type world;
type state;

//### Properties:
property health(char: character) : number; 
property knowledge(char: character) : number; 
property authority(char: character) : number; 





property satisfaction(char: character) : number; // Satisfaction level of each character
property altruism(char: character) : number; // Altruism level of each character (-3 to 3)
property ambition(char: character) : number; // Ambition level of each character (-3 to 3)
property max_ambition(char: character) : number; // Ambition level of each character (-3 to 3)
property relation(char: character, other: character) : number; // Relationship liking level between characters (-3 to 3)
property support(char: character) : number; 
property supports(char: character, other: character) : boolean;
property money(char: character) : number; 
property state(char: character) : state; 

property ship_defense(world:world) : number; 
property ship_magic(world:world) : number; 
property ship_status(world:world) : number;

property later(world:world) : boolean; 
entity world:world;

entity hidden :state;
entity blocked :state;


entity mc : character;
entity actress : character;
entity actor : character;
entity soldier : character;


    
health(mc) = 2;
health(actress) = 2;
health(actor) = 2;
relation(actor,mc) = -3;

ambition(mc) = 5;
altruism(mc) = -2;

ambition(actress) = -3;
altruism(actress) = 2;

ambition(actor) = 3;
altruism(actor) = -2;

//state(actor) = blocked;

//key akcje
    action key_action1(char:character) {
        precondition:
    
            health(char) > 0 
            &state(char)!= blocked
            &ship_defense(world) > 0
            &ship_status(world) < 0
            ;
        effect:
            if(altruism(char) > 2 & ambition(char) > 2 )
                satisfaction(char) = satisfaction(char) + 1
            ;
        consenting: char;
    };


    action key_action2(char:character) {
        precondition:
    
            health(char) > 0 
            &state(char)!= blocked
            &ship_magic(world) < 0
            //&authority(char) > 1
            &relation(actor,mc) < 0
            ;
        effect:
            if(altruism(char) <= 2 & ambition(char) > 2 )
                satisfaction(char) = satisfaction(char) + 1
            
            ;
        consenting: char;
    };

    action key_action3(char:character) {
        precondition:
    
            health(char) > 0 
            &state(char)!= blocked
            &ship_magic(world) > 0
            &ship_status(world) > 0
            ;
        effect:
            if(ambition(char) <= 2 )
             satisfaction(char) = satisfaction(char) + 1
            ;
        consenting: char;
    };


//akcje

    action change_health_down(char:character,char2:character) {
        precondition:
    
            health(char) > 0 
            &state(char)!= blocked
            &char == mc
            ;
        effect:
            health(char2) = health(char2) - 1
            & later(world) 
            ;
        consenting: char;
    };

    action change_health_up(char:character,char2:character) {
        precondition:
    
            health(char) > 0 
            &state(char)!= blocked
            &char == mc
            ;
        effect:
            health(char2) = health(char2) + 1 
            & later(world)
            ;
        consenting: char;
    };


     action change_knowledge_down(char:character,char2:character) {
        precondition:
    
            health(char) > 0 
            &state(char)!= blocked
            &knowledge(char) > 1
            &char == mc
            ;
        effect:
            knowledge(char2) = knowledge(char2) - 1
            & later(world) 
            ;
        consenting: char;
    };

    action change_knowledge_up(char:character) {
        precondition:
    
            health(char) > 0 
            &state(char)!= blocked
            &char == mc
            &state(char) == hidden
            ;
        effect:
            knowledge(char) = knowledge(char) + 5
            & later(world)
            ;
        consenting: char;
    };

    action change_relation_down(char:character,char2:character,char3:character) {
        precondition:
    
            health(char) > 0
            &state(char)!= blocked 
            &char == mc
            ;
        effect:
            relation(char2,char3) = relation(char2,char3) - 1 
            & health(char) = health(char) - 1 
            & later(world)
            ;
        consenting: char;
    };

    action change_relation_up(char:character,char2:character,char3:character) {
        precondition:
    
            health(char) > 0 
            &state(char)!= blocked
            &char == mc
            ;
        effect:
            relation(char2,char3) = relation(char2,char3) + 1 
            & later(world)
            ;
        consenting: char;
    };


    action hide(char:character) {
        precondition:
    
            health(char) > 0 
            & state(char) != hidden
            &state(char)!= blocked
            ;
        effect:
            state(char) = hidden
            & later(world)
            ;
        consenting: char;
    };

    action find(char:character,char2:character) {
        precondition:
    
            health(char) > 0 
            & state(char2) == hidden
            &state(char)!= blocked
            &char == mc
            ;
        effect:
            state(char2) = ?
            & later(world)
            ;
        consenting: char;
    };

    action block(char:character,char2:character) {
        precondition:
    
             state(char2) != blocked
             &char == mc
            ;
        effect:
            state(char2) = blocked
            & later(world)
            ;
        consenting: char;
    };

    action unblock(char:character,char2:character) {
        precondition:
    
            health(char) > 0 
            &state(char)!= blocked
            & state(char2) == blocked
            &char == mc
            ;
        effect:
            state(char2) = ?
            & later(world)
            ;
        consenting: char;
    };

    action unblock_yourself(char:character) {
		precondition:
	
			health(char) > 0 
			&state(char)== blocked
			
			&char == mc
			;
		effect:
			state(char) = ?
			& later(world)
			;
		consenting: char;
	};

    action change_ship_defense_down(char:character) {
        precondition:
    
            health(char) > 0 
            &state(char)!= blocked
            &char == mc
            ;
        effect:
            ship_defense(world) = ship_defense(world) - 1
            & later(world)
            ;
        consenting: char;
    };

    action change_ship_defense_up(char:character) {
        precondition:
    
            health(char) > 0 
            &state(char)!= blocked
            &char == mc
            ;
        effect:
            ship_defense(world) = ship_defense(world) + 1
            & later(world)
            
            ;
        consenting: char;
    };


    action change_ship_magic_down(char:character) {
        precondition:
    
            health(char) > 0 
            &state(char)!= blocked
            &char == mc
            ;
        effect:
            ship_magic(world) = ship_magic(world) - 1
            & later(world)
            ;
        consenting: char;
    };

    action change_ship_magic_up(char:character) {
        precondition:
    
            health(char) > 0 
            &state(char)!= blocked
            &char == mc
            ;
        effect:
            ship_magic(world) = ship_magic(world) + 1
            & later(world)
            ;
        consenting: char;
    };


    action change_ship_status_down(char:character) {
        precondition:
    
            health(char) > 0 
            &state(char)!= blocked
           &char == mc
            ;
        effect:
            ship_status(world) = ship_status(world) - 1
            & later(world)
            ;
        consenting: char;
    };

    action change_ship_status_up(char:character) {
        precondition:
    
            health(char) > 0 
            &state(char)!= blocked
            &char == mc
            ;
        effect:
            ship_status(world) = ship_status(world) + 1
            ;
        consenting: char;
    };


    action support(char:character,char2:character, char3:character) {
        precondition:
    
             state(char) != blocked
             &char == mc
             &char != char2
             &!supports(char,char2)
            ;
        effect:
            supports(char,char2)
            & support(char2) = support(char2) + 1
            & later(world)
            ;
        consenting: char;
    };

action lose_support(char:character,char2:character) {
        precondition:
    
             state(char) != blocked
             &char == mc
             &char != char2
             &supports(char,char2)
            ;
        effect:
            !supports(char,char2)
            & support(char2) = support(char2) - 1
            & later(world)
            ;
        consenting: char;
    };

action support_money(char:character,char2:character, char3:character) {
        precondition:
    
             state(char) != blocked
             &char != char3
             &char != char2
             &char == mc
             &!supports(char2,char3)
             &money(char) > 0
            ;
        effect:
            supports(char2,char3)
            & support(char3) = support(char3) + 1
            & later(world)
            &money(char) = money(char) - 1
            &money(char2) = money(char2) + 1
            ;
        consenting: char;
    };

action lose_support_money(char:character,char2:character, char3:character) {
        precondition:
    
            state(char2) != blocked
            &char == mc
            &char != char3
            &char != char2
            &supports(char2,char3)
            &money(char) > 0
            ;
        effect:
            !supports(char2,char3)
            & support(char3) = support(char3) - 1
            & later(world)
            &money(char) = money(char) - 1
            &money(char2) = money(char2) + 1
            ;
        consenting: char;
    };

action support_authority(char:character,char2:character, char3:character) {
        precondition:
    
             state(char2) != blocked
             &char != char3
             &char != char2
             &char == mc
             &!supports(char2,char3)
             &authority(char) > 2
            ;
        effect:
            supports(char2,char3)
            & support(char3) = support(char3) + 1
            & later(world)
           
            ;
        consenting: char;
    };

action lose_support_authority(char:character,char2:character, char3:character) {
        precondition:
    
             state(char2) != blocked
             &char == mc
             &char != char3
             &char != char2
             &supports(char2,char3)
             &authority(char) > 2
            ;
        effect:
            !supports(char2,char3)
            & support(char3) = support(char3) - 1
            & later(world)
            
            ;
        consenting: char;
    };


trigger authority_calc(char:character) {
	precondition:
		authority(char) != (if (health(char)>=2)  1 else 0 )+  knowledge(char) + support(char)  ;
	effect:
		authority(char) == (if (health(char)>=2)  1 else 0 ) +  knowledge(char)   + support(char)   ;
};



trigger trigger1(char:character,char2:character) {
	precondition:
		health(char) > 0
        & state(char) != blocked
        & state(char2) != blocked
        & later(world)
        & ambition(char2) >= 2.5
        & relation(char2,char) < -1
        ;
	effect:
		health(char) = health(char) - 1
        ;
};


trigger trigger2(char:character) {
	precondition:
		health(char) > 0
        & state(char) != blocked
        & later(world)
        & ambition(char) <= 2.5
        & ship_magic(world) <= 0.5
        & ship_status(world) <= 0.5
        ;
	effect:
		ship_magic(world) = ship_magic(world) +1
        ;
};

trigger trigger3(char:character ) {
	precondition:
		health(char) < 2
        & state(char) != blocked
        & state(char) == hidden
        & later(world)
        & ambition(char) > 2.5
        & knowledge(char) < 1
        
        ;
	effect:
		knowledge(char)  = knowledge(char) + 1
        ;
};


trigger trigger4(char:character ) {
	precondition:
		health(char) > 0 
        & state(char) != blocked
        & state(char) != hidden
        & later(world)
        & ambition(char) > 2.5
        
        
        ;
	effect:
		state(char) = hidden
        ;
};










utility():
    satisfaction(mc) ;

utility(mc):
    satisfaction(mc);

utility(actress):
    satisfaction(actress);

utility(actor):
    satisfaction(actor);




