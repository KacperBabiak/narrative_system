/////////////////////////////////////types


type hand;




///////////////////////////////////entity


entity actor : character;
entity soldier : character;
entity doctor : character;
entity thief : character;
entity mc : character;
entity tumblr : character;
entity game : entity;

entity rock : hand;
entity paper : hand;
entity scissors : hand;
//entity rock : not;



//////////////////////////////////property

property round(game) : number;
property phase (game : entity) : number;
property played(game) : boolean;
//character

property points(character : character) : number;
property did_something(char: character) : number;
property in_duel(char: character) : boolean;
property hand_chosen(char: character) : hand;
property proposed_tie(char: character) : boolean;

//emotions
property likes(character1: character, character2 : character) : number;
property trusts(character1: character, character2 : character) : number;


//////////////////////////////////////init_properties

hand_chosen(thief) = ?;
hand_chosen(doctor) = ?;
hand_chosen(soldier) = ?;
hand_chosen(actor) = ?;
hand_chosen(tumblr) = ?;

phase(game) = 0;

points(thief) = 2;
points(doctor) = 2;
points(soldier) = 2;
points(actor) = 2;
points(tumblr) = 2;

!in_duel(thief);
!in_duel(doctor);
!in_duel(soldier);
!in_duel(actor);
!in_duel(tumblr);
!in_duel(mc);

likes(thief, doctor) = 15;
likes(thief, mc) = 15;
likes(thief, soldier) = -15;
likes(thief, actor) = 45;
likes(thief, tumblr) = 5;
trusts(thief, mc) = 15;
trusts(thief, doctor) = 35;
trusts(thief, soldier) = -15;
trusts(thief, actor) = 35;
trusts(thief, tumblr) = 5;



likes(doctor, mc) = 35;
likes(doctor, thief) = 20;
likes(doctor, soldier) = 15;
likes(doctor, actor) = 30;
likes(doctor, tumblr) = 5;
trusts(doctor, mc) = 35;
trusts(doctor, thief) = 25;
trusts(doctor, soldier) = 20;
trusts(doctor, actor) = 15;
trusts(doctor, tumblr) = 5;


likes(soldier, mc) = 0;
likes(soldier, thief) = 10;
likes(soldier, doctor) = 35;
likes(soldier, actor) = -5;
likes(soldier, tumblr) = 5;
trusts(soldier, mc) = 5;
trusts(soldier, thief) = 5;
trusts(soldier, doctor) = 20;
trusts(soldier, actor) = -15;
trusts(soldier, tumblr) = 5;

likes(actor, mc) = 10;
likes(actor, thief) = 20;
likes(actor, doctor) = 35;
likes(actor, soldier) = 5;
likes(actor, tumblr) = 5;
trusts(actor, mc) = 15;
trusts(actor, thief) = 15;
trusts(actor, doctor) = 45;
trusts(actor, soldier) = 25;
trusts(actor, tumblr) = 5;

likes(tumblr, mc) = 50;
likes(tumblr, thief) = 5;
likes(tumblr, doctor) = 5;
likes(tumblr, soldier) = 5;
likes(tumblr, actor) = 5;
trusts(tumblr, mc) = 5;
trusts(tumblr, thief) = 5;
trusts(tumblr, doctor) = 5;
trusts(tumblr, soldier) = 5;
trusts(tumblr, actor) = 5;


//w jaki sposób atakowanie i pomaganie, w jaki sposób wybieranie handów? oddzielnie plany?
//rundy
//oszukiwanie sie
//1.pętla
//2.ogarniecie mechanik
//3.dopracowanie
//4. zrobienie jako prosta gra
//5.caching

////////////////////////////////////////actions
action challenge(char : character, other : character) {
	precondition:
        char != other &
		!in_duel(char) &
        !in_duel(other) 
        & phase(game) == 0
		;

	effect:
		did_something(char) = did_something(char) + 1 &
		did_something(other) = did_something(other) + 1 &
        in_duel(char) &
        in_duel(other) &
        phase(game) = 1
		;
		 
	consenting: char,other;
	
};

action show_fair(char : character, other : character) {
	precondition:
        char != other &
		in_duel(char) &
        in_duel(other) &
        trusts(char,other) > 14 &
        !proposed_tie(char) &
       !proposed_tie(other)
		;

	effect:
		did_something(char) = did_something(char) + 1 &
		did_something(other) = did_something(other) + 1 &
        hand_chosen(char) = paper &
        believes(other, hand_chosen(char)) = paper &
        trusts(other,char) =  trusts(other,char) + 10 &
        trusts(char,other) = trusts(char,other) +10 &
        likes(other,char) =  likes(other,char) + 10 &
        likes(char,other) = likes(char,other) +10 
        & points(char) = points(char) + 1  &
        proposed_tie(char)
		;
		 
	consenting: char;
	
};


action show_cheat(char : character, other : character) {
	precondition:
        char != other &
		in_duel(char) &
        in_duel(other) &
        trusts(char,other) > 14  &
        !proposed_tie(char) &
       !proposed_tie(other)
       
		;

	effect:
		did_something(char) = did_something(char) + 1 &
		did_something(other) = did_something(other) + 1 &
        hand_chosen(char) = scissors &
        believes(other, hand_chosen(char)) = paper &
        trusts(other,char) =  trusts(other,char) - 10 &
        trusts(char,other) = trusts(char,other) - 10 &
        likes(other,char) =  likes(other,char) - 10 &
        likes(char,other) = likes(char,other) - 10 
        & points(char) = points(char) + 1212 &
        proposed_tie(char)
		;
		 
	consenting: char;
	
};

action answer_fair(char : character, other : character) {
	precondition:
        char != other &
		in_duel(char) &
        in_duel(other) &
        trusts(char,other) > 14 &
        proposed_tie(other)
       
		;

	effect:
		did_something(char) = did_something(char) + 1 &
		did_something(other) = did_something(other) + 1 &
        hand_chosen(char) = paper &
        trusts(other,char) =  trusts(other,char) + 10 &
        trusts(char,other) = trusts(char,other) +10 &
        likes(other,char) =  likes(other,char) + 10 &
        likes(char,other) = likes(char,other) +10 
        & points(char) = points(char) + 1  
		;
		 
	consenting: char;
	
};


action answer_cheat(char : character, other : character) {
	precondition:
        char != other &
		in_duel(char) &
        in_duel(other) &
        trusts(char,other) > 14 &
        proposed_tie(other)
       
		;

	effect:
		did_something(char) = did_something(char) + 1 &
		did_something(other) = did_something(other) + 1 &
        hand_chosen(char) = scissors &
        trusts(other,char) =  trusts(other,char) - 10 &
        trusts(char,other) = trusts(char,other) - 10 &
        likes(other,char) =  likes(other,char) - 10 &
        likes(char,other) = likes(char,other)  - 10 
        & points(char) = points(char) + 1212  
		;
		 
	consenting: char;
	
};

/*

//trigger?
action play(char : character, other : character) {
	precondition:
        char != other 
		& in_duel(char) 
        & in_duel(other) 
        &hand_chosen(char) != ? 
        &hand_chosen(other) != ? 
        //&phase(game) != 3
		;

	effect:
        phase(game) = 3 &
        played(game)  &
        //tie
        if(hand_chosen(char) == hand_chosen(other))
            (points(char) =  points(char) + 1 &
            points(other) =  points(other) + 1 )

        //rock-paper
        elseif(hand_chosen(char) == rock & hand_chosen(other) ==paper)
            points(other) =  points(other) + 2 

        //rock-scissors
        elseif(hand_chosen(char) == rock & hand_chosen(other) ==scissors)
            points(char) =  points(char) + 2 

        //scissors-paper
        elseif(hand_chosen(char) == scissors & hand_chosen(other) ==paper)
            points(char) =  points(char) + 2 
        

		;
		 
	consenting: char;
	
};

//////////////////////////triggers


trigger choose_players(char : character, other : character) {
	precondition:
        char != other 
		//&!in_duel(char) &
        //!in_duel(other) &
        //phase(game) == 0
		;

	effect:
        in_duel(char) &
        in_duel(other) 
        //&phase(game) = 1
		;	
	
};
*/

//granie
//uczucia
//oszukiwanie sie / dogadywanie
//granie ponownie
//ilosć rundy, zaawansowane zasay
//inne działania




//////////////////utility
//layed(game)(sum(c : character) did_something(c))
utility():(sum(c : character) did_something(c)) > 4 ;
//in_duel(thief)  & played(game);
    //if(hand_chosen(thief) != ? & hand_chosen(actor) != ?) 1 else 0  ;
    //if(in_duel(thief)) 1 else 0  ;
	


utility(doctor):
	//(sum(c : character) points(c)) +
	 //played(game);
	 did_something(doctor);

utility(thief):
	 did_something(thief) ;

utility(soldier):
	 did_something(soldier) + points(soldier) ;




