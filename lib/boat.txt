///////////////////////////////////entity
                type has_items;

				type character : has_items, object ;
				type item : object ;
                type place : object;
                type container : has_items , object;
                type key : item;
                type food : item;
                type meal : food;



				entity actor : character;
				entity science : character;
				entity doctor : character;
				entity agent : character;
				entity mc : character;
				entity tumblr : character;

				entity table : place;
                entity cabin1 : place;
                entity cabin2 : place;
                entity cabin3 : place;
                entity cabin4 : place;
                entity cabin5 : place;

                entity prow : place;
                entity mast : place;
                entity stern :place;



				//////////////////////////////////property


				//properties
				property health(character : character) : number;
				property has(character : object, item : item) : number;
                property did_something(char: character) : number;
				property happiness(character : character) : number;
				property altruism(character : character) : number;
				property ambition(character : character) : number;

				//emotions towards other characters
				property likes(character1: character, character2 : character) : number;
				property trusts(character1: character, character2 : character) : number;
                
                property connected_to(place : place, place2 : place) : boolean;
                
                //object
                property closed(object : object) : boolean;  
                property at(object : object) : object;
                //item
                property opens(key : key) : object;   

                connected_to(cabin1,table);
                connected_to(table,cabin1);
                connected_to(cabin2,table);
                connected_to(table,cabin2);
                connected_to(cabin3,table);
                connected_to(table,cabin3);
                connected_to(cabin4,table);
                connected_to(table,cabin4);
                connected_to(cabin5,table);
                connected_to(table,cabin5);
                
                connected_to(prow,table);
                connected_to(table,prow);

                connected_to(prow,mast);
                connected_to(mast,prow);

                connected_to(mast,stern);
                connected_to(stern,mast);


at(doctor) = cabin1;
at(science) = cabin2;
at(agent) = cabin3;
at(actor) = cabin4;
at(tumblr) = cabin5;



action travel(character : character, from : place, to : place) {
	precondition:
		from != to &
		at(character) == from &
        connected_to(from,to);
	effect:
		at(character) = to
        &did_something(character) = did_something(character) + 1
        ;
	consenting: character;
	
};

utility():
    (sum(c:character) did_something(c) > 7) 
    
    
    
    ;

utility(agent): 
    did_something(agent)> 3;
utility(doctor): 
    did_something(doctor)> 3;
utility(science): 
    did_something(science)> 1 & at(science) == stern;
utility(actor): 
    did_something(actor)> 3;
utility(tumblr): 
    did_something(tumblr)> 1 & at(tumblr) == mast;
