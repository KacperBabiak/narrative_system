/////////////////////////////////////types


type hand;




///////////////////////////////////entity


entity actor : character;
entity soldier : character;






//////////////////////////////////property


property proposed_tie(char: character) : boolean;

//emotions

//////////////////////////////////////init_properties



//w jaki sposób atakowanie i pomaganie, w jaki sposób wybieranie handów? oddzielnie plany?
//rundy
//oszukiwanie sie
//1.pętla
//2.ogarniecie mechanik
//3.dopracowanie
//4. zrobienie jako prosta gra
//5.caching

////////////////////////////////////////actions
action challenge(char : character, other : character) {
	precondition:
        char != other &
		!in_duel(char) &
        !in_duel(other) 
        
		;

	effect:
		
        in_duel(char) &
        in_duel(other) &
        
		;
		 
	consenting: char,other;
	
};

action show_fair(char : character, other : character) {
	precondition:
        char != other &
		in_duel(char) &
        in_duel(other) 
        
		;

	effect:
		did_something(char) = did_something(char) + 1 &
		did_something(other) = did_something(other) + 1 &
        hand_chosen(char) = paper &
        believes(other, hand_chosen(char)) = paper &
        trusts(other,char) =  trusts(other,char) + 10 &
        trusts(char,other) = trusts(char,other) +10 &
        likes(other,char) =  likes(other,char) + 10 &
        likes(char,other) = likes(char,other) +10 
        & points(char) = points(char) + 1  &
        proposed_tie(char)
		;
		 
	consenting: char;
	
};


action show_cheat(char : character, other : character) {
	precondition:
        char != other &
		in_duel(char) &
        in_duel(other) &
        trusts(char,other) > 14  &
        !proposed_tie(char) &
       !proposed_tie(other)
       
		;

	effect:
		did_something(char) = did_something(char) + 1 &
		did_something(other) = did_something(other) + 1 &
        hand_chosen(char) = scissors &
        believes(other, hand_chosen(char)) = paper &
        trusts(other,char) =  trusts(other,char) - 10 &
        trusts(char,other) = trusts(char,other) - 10 &
        likes(other,char) =  likes(other,char) - 10 &
        likes(char,other) = likes(char,other) - 10 
        & points(char) = points(char) + 1212 &
        proposed_tie(char)
		;
		 
	consenting: char;
	
};

action answer_fair(char : character, other : character) {
	precondition:
        char != other &
		in_duel(char) &
        in_duel(other) &
        trusts(char,other) > 14 &
        proposed_tie(other)
       
		;

	effect:
		did_something(char) = did_something(char) + 1 &
		did_something(other) = did_something(other) + 1 &
        hand_chosen(char) = paper &
        trusts(other,char) =  trusts(other,char) + 10 &
        trusts(char,other) = trusts(char,other) +10 &
        likes(other,char) =  likes(other,char) + 10 &
        likes(char,other) = likes(char,other) +10 
        & points(char) = points(char) + 1  
		;
		 
	consenting: char;
	
};


action answer_cheat(char : character, other : character) {
	precondition:
        char != other &
		in_duel(char) &
        in_duel(other) &
        trusts(char,other) > 14 &
        proposed_tie(other)
       
		;

	effect:
		did_something(char) = did_something(char) + 1 &
		did_something(other) = did_something(other) + 1 &
        hand_chosen(char) = scissors &
        trusts(other,char) =  trusts(other,char) - 10 &
        trusts(char,other) = trusts(char,other) - 10 &
        likes(other,char) =  likes(other,char) - 10 &
        likes(char,other) = likes(char,other)  - 10 
        & points(char) = points(char) + 1212  
		;
		 
	consenting: char;
	
};




//////////////////////////triggers




//granie
//uczucia
//oszukiwanie sie / dogadywanie
//granie ponownie
//ilosć rundy, zaawansowane zasay
//inne działania




//////////////////utility

utility():



utility(actor):
	

utility(soldier):
	 






