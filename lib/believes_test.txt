/////////////////////////////////////types


type item;

//////////////////////////////////property


//person

entity char : character;
entity friend : character;
entity enemy : character;
entity it: item;


property altruism(char: person) : number;
property ambition(char: person) : number;

property has_item(person : character) : item;
property wants_item(person : character) : item;
property wants_attack(person : character) : character;
property wants_help(person  : character) : character;


co jest celem planu?


											////////////////////////////////////////actions

action lose_in_storm(char:person, item:item){
							precondition:
							health(char) != 0
							
							;

							effect:
							has(char,item) = has(char,item) - 1
							
							
							;
							consenting: world;
												
};

action get_attacked(char:person, item:item){
	precondition:
							health(char) != 0
							
							;

							effect:
							health(char) = health(char) - 1
							
							
							;
							consenting: world;
							
						};

action get_info_about(char:person, item:item) {
							precondition:
							!knows_location(char,item)
							
							;

							effect:
							knows_location(char,item)
							
							
							;
							consenting: world;
							
						};

action hear_about_good(char:person, char2:person) {
							precondition:
							health(char) != 0
							
							;

							effect:
							likes(char,char2) = likes(char,char2) + 1
							
							
							;
							consenting: world;
							
						};

action hear_about_bad(char:person, char2:person) {
							precondition:
							health(char) != 0
							
							;

							effect:
							likes(char,char2) = likes(char,char2) - 1
							
							
							;
							consenting: world;
							
						};

action decide_to_attack(char:person, char2:person, island:place) {
							precondition:
							!wants_to_attack(char,char2)
							&at(char) == island
							&at(char2) == island
							;

							effect:
							wants_to_attack(char,char2)
							
							
							;
							consenting: world;
							
						};

action decide_to_help(char:person, char2:person, char3:person, island:place) {
							precondition:
							!wants_to_attack(char,char3)
							&wants_to_attack(char2,char3)
							&at(char) == island
							&at(char2) == island
							&at(char3) == island
							;

							effect:
							wants_to_attack(char,char3)
							
							
							;
							consenting: world;
							
						};

action travel(char:person, island:place){
	precondition:
							!at(char) == island
							
							;

							effect:
							at(char) = island
							
							
							;
							consenting: world;
							
						};
	

utility(): 
knows_location(Actor,Meds) & likes(Actress,Agent)>0 & wants_to_attack(Agent,Mc);


utility(world): 
knows_location(Actor,Meds) & likes(Actress,Agent)>0 & wants_to_attack(Agent,Mc);