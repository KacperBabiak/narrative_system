/////////////////////////////////////types


type character;
type item ;
type  place;

//////////////////////////////////property

//item
property at(island:place , item:item) : boolean;
property has(char:character , item:item) : boolean;


//island


//character
property wants(char:character,item:item) : boolean;
property goes_to(char:character) : place;
property item_points(c:character):number;
property attack_points(c:character):number;
property altruism(c:character):number; //-2 : 2
property likes(c:character,c2:character):number; //-2 : 2
property wants_to_attack(c:character,c2:character):boolean; //-2 : 2


entity Fuel: item;  
//at(island1,Fuel);
entity Food: item; 
at(island2, Food) ; 
entity Meds: item; 
at( island3, Meds) ; 
 

entity island1 : place;
entity island2 : place;
entity island3 : place;

entity Actress: character; 
wants(Actress,Fuel);
wants_to_attack(Actress,Actor);


entity Actor: character; 
wants(Actor,Fuel);

entity Coward: character;  
wants(Coward,Meds);

entity Mc: character; 
wants(Mc,Food);
has(Mc,Fuel)  ;  
goes_to(Mc) = island3;

entity Hunter: character; 
wants(Hunter,Food);

entity Agent: character; 
wants(Agent,Food);


											////////////////////////////////////////actions

action travel(char:character, place:place){
							precondition:
							goes_to(char) == ?;

							effect:
							
							goes_to(char) = place

							;
							consenting: char;
												
};

action attack(char:character,char2:character, place: place){
							precondition:
							goes_to(char) == place
							& goes_to(char2) == place
							&wants_to_attack(char,char2)
							;

							effect:

							


							attack_points(char) = attack_points(char) - altruism(char) + 3

							;
							consenting: char;
												
};

action find_item(char:character,place: place, it:item){
							precondition:
							goes_to(char) == place
							&wants(char,it)
							& at(place,it);

							effect:

							


							item_points(char) = item_points(char) + 1

							;
							consenting: char;
												
};

action take_item(char:character,char2:character, place: place, it:item){
							precondition:
							goes_to(char) == place
							& goes_to(char2) == place
							&wants(char,it)
							& has(char2,it);

							effect:

							


							item_points(char) = item_points(char) + 1

							;
							consenting: char;
												
};



utility(): 
//if( 
//		exists(c:character)(
//			goes_to(c) == ?
//				)
//	)
//		0
//		else
//		1
//		;
goes_to(Actress) != ?;
//if(attack_points(Actress) > 0 & item_points(Actress) >0) 2 elseif(item_points(Actress) >0) 1 else 0;





utility(Actress):
if (attack_points(Actress) > 0 & item_points(Actress) > 0) 50 else (attack_points(Actress) + item_points(Actress));




