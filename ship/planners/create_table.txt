type place;
type pirate;
type world;

property power(character : character) : number;
property injured(character : character) : number;
property satisfaction(character : character) : number;
property state(character : character) : number; //0 - nic 1- odwrócenie uwagi 2 -og³uszenie
property at(character : character) : place;
property treasure(character : character) : number;
property altruism(character : character) : number;
property ambition(character : character) : number;
property knows_location_treasure(character : character) : number;
property has_access_pirates(character : character) : number;

property world_state(world : world) : number; //dzieñ, noc, s³aba pogoda 
property later(world : world) : boolean;
property pirates_knows_location_treasure(pirate : pirate) : number;
property pirates_relation(pirate : pirate) : number; //s³aba, neutralna, dobra
property pirates_power(pirate : pirate) : number; 
property pirates_treasure(pirate : pirate) : number; 

property distraction(place:place) :number;

entity char1 : character;
entity char2 : character;
entity char3 : character;

entity world:world;
entity pirates:pirate;

entity  ship : place;
entity  pirate_base : place;
entity  treasure_place : place;


		   world_state(world) = 0 ;
pirates_relation(pirates) = 1 ;
pirates_power(pirates) = 1 ;
pirates_treasure(pirates) = 2 ;
pirates_knows_location_treasure(pirates) = 0 ;
power(char1) = 1 ;
injured(char1) = 1 ;
state(char1) = 0 ;
at(char1) = treasure_place ;
treasure(char1) = 1 ;
altruism(char1) = 1 ;
ambition(char1) = 0 ;
knows_location_treasure(char1) = 1 ;
has_access_pirates(char1) = 0 ;
power(char2) = 0 ;
injured(char2) = 0 ;
state(char2) = 0 ;
at(char2) = ship ;
treasure(char2) = 0 ;
altruism(char2) = 1 ;
ambition(char2) = 0 ;
knows_location_treasure(char2) = 0 ;
has_access_pirates(char2) = 0 ;
power(char3) = 1 ;
injured(char3) = 0 ;
state(char3) = 0 ;
at(char3) = ship ;
treasure(char3) = 3 ;
altruism(char3) = 0 ;
ambition(char3) = 1 ;
knows_location_treasure(char3) = 1 ;
has_access_pirates(char3) = 0 ;
distraction(ship) = 0 ;
distraction(pirate_base) = 1 ;
distraction(treasure_place) = 1 ;

action travel(character : character,  to : place){
	precondition:
		(
		(to==pirate_base & has_access_pirates(character)==1)
		|
		(to==treasure_place & knows_location_treasure(character) ==1)
		|
		(to==ship)
		)
		& character == char1
		;
	effect:
		later(world)&
		at(character) = to;
	consenting: character; 
	
};

action distraction(character : character,  place : place){
	precondition:
		at(character) == place & character == char1;
		
	effect:
		distraction(place) =1 & later(world);
	consenting: character; 
	
};

action stun(character : character,character2 : character, place : place){
	precondition:
		at(character) == place &
		at(character2) == place &
		distraction(place)==1 &
		character != character2 
		
		& character == char1;
		
	effect:
		if (altruism(character) > 0)
			satisfaction(character) = satisfaction(character) - 1 
		&state(character2) = 2
		& later(world);
	consenting: character; 
	
};


action escape(character : character){
	precondition:
		at(character) == ship &
		distraction(ship) == 1
		
		
		& character == char1;
		
	effect:
		if (ambition(character) == 0 | injured(character) == 1) 
			satisfaction(character) = satisfaction(character) + 1
		& later(world);
	consenting: character; 
	
};

action escape_pirates_help(character : character){
	precondition:
		at(character) == ship &
		(distraction(ship) == 1 & pirates_relation(pirates) == 1) |
		pirates_power(pirates) == 0 |
		world_state(world) > 0 
		
		& character == char1;
		
	effect:
		if (ambition(character) == 0 | injured(character) == 1) 
			satisfaction(character) = satisfaction(character) + 1
		& later(world);
	consenting: character; 
	
};

action take_treasure_char(character : character,character2 : character, place : place){
	precondition:
		at(character) == place &
		at(character2) == place &
		state(character2) == 2 &
		character != character2 &
		treasure(character2) > 0
		& character == char1;
		
	effect:
		if (altruism(character) > 0)
			satisfaction(character) = satisfaction(character) - 1 
		&
		if (ambition(character) > 0)
			satisfaction(character) = satisfaction(character) + 1 
		&
		treasure(character2) = treasure(character2) - 1 &
		treasure(character) = treasure(character) + 1
		& later(world);
	consenting: character; 
	
};

action take_treasure_location_char(character : character,character2 : character, place : place){
	precondition:
		at(character) == place &
		at(character2) == place &
		state(character2) == 2 &
		character != character2 &
		knows_location_treasure(character2)==1
		& character == char1;
		
	effect:
		if (altruism(character) > 0)
			satisfaction(character) = satisfaction(character) - 1 
		&
		
		knows_location_treasure(character)=1
		& later(world);
	consenting: character; 
	
};

action get_access_pirates(character : character){
	precondition:
		pirates_relation(pirates) == 1 |
		pirates_power(pirates) == 0 |
		world_state(world) > 0 
		& character == char1
		;
	effect:
		later(world)&
		has_access_pirates(character) = 1;
	consenting: character; 
	
};

action tell_treasure_location(character : character,character2 : character){
	precondition:
		
		knows_location_treasure(character)==1
		& character == char1
		;
	effect:
		later(world)&
		knows_location_treasure(character2)=1;
	consenting: character; 
	
};


action get_treasure(character : character){
	precondition:
		
		knows_location_treasure(character)==1
		&treasure(character) < 2
		& character == char1
		;
	effect:
	
		if (ambition(character) > 0)
			satisfaction(character) = satisfaction(character) + 1 
		&
		later(world)&
		treasure(character) = treasure(character) + 1;
	consenting: character; 
	
};

action give_pirates_treasure_location(character : character){
	precondition:
		pirates_knows_location_treasure(pirates)==0 &
		knows_location_treasure(character)==1
		& character == char1
		& at(character) == pirate_base
		;
	effect:
		later(world)&
		pirates_knows_location_treasure(pirates)==1 &
		pirates_relation(pirates) = pirates_relation(pirates) + 1;
	consenting: character; 
	
};


action give_pirates_treasure(character : character){
	precondition:
		treasure(character) > 0
		& character == char1
		& at(character) == pirate_base
		;
	effect:
		if (ambition(character) > 0)
			satisfaction(character) = satisfaction(character) - 1 
		&
		later(world)&
		treasure(character) = treasure(character) - 1 &
		pirates_treasure(pirates) = pirates_treasure(pirates) + 1 &
		pirates_relation(pirates) = pirates_relation(pirates) + 1;
	consenting: character; 
	
};

action take_pirates_treasure(character : character){
	precondition:
		has_access_pirates(character) == 1
		& pirates_treasure(pirates) > 0
		& character == char1
		;
	effect:
		if (ambition(character) > 0)
			satisfaction(character) = satisfaction(character) + 1 
		&
		later(world)&
		treasure(character) = treasure(character) + 1 &
		pirates_treasure(pirates) = pirates_treasure(pirates) - 1 &
		pirates_relation(pirates) = pirates_relation(pirates) - 1;
	consenting: character; 
	
};

action wait_for_night(character : character){
	precondition:
		world_state(world) == 0 
		& character == char1
		;
	effect:
		later(world)&
		world_state(world) =  1 ; 
	consenting: character; 
	
};

action attack_pirate_base(character : character){
	precondition:
		power(character) > 0
		& character == char1
		;
	effect:
		later(world)&
		pirates_power(pirates) = pirates_power(pirates) - 1
		 ; 
	consenting: character; 
	
};

action train(character : character){
	precondition:
		 character == char1
		;
	effect:
		later(world)&
		power(character) = power(character) + 1
		 ; 
	consenting: character; 
	
};


action take_treasure_pirates(character : character){
	precondition:
		((pirates_power(pirates) == 0 ) | distraction(pirate_base) == 1 )
		& at(character) == pirate_base
		& character == char1
		& pirates_treasure(pirates) > 0
		;
	effect:
	
		if (ambition(character) > 0)
			satisfaction(character) = satisfaction(character) + 1 
		&
		later(world)&
		pirates_treasure(pirates) = pirates_treasure(pirates) - 1
		&treasure(character) = treasure(character) + 1

		 ; 
	consenting: character; 
	
};


			utility(): 
 satisfaction(char1);utility(char1): 
 satisfaction(char1);
utility(char2): 
 satisfaction(char2);
utility(char3): 
 satisfaction(char3);
